/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Rust)
package rust;
import java.io.*;




public class Rust
{

	static SymbolTable symbolTable = new SymbolTable();

  public static void main(String args []) throws ParseException, FileNotFoundException
  {
    /**
     Token token; //Creo el token sobre el que se itera
    
    InputStream input = new FileInputStream("src/rust/prueba.txt");
    SimpleCharStream stream = new SimpleCharStream(input);
    
    RustTokenManager tokenManager = new RustTokenManager(stream); //Creo el manager de los token

	token = tokenManager.getNextToken(); //primer token
	
	while(token.kind != RustConstants.EOF) {
		System.out.println("token: "+token.image +"  "+ tokenImage[token.kind]); //Imprimo la info
		token = tokenManager.getNextToken();
	}
	*/


// Para poder seguir el parser
	InputStream input = new FileInputStream("src/rust/prueba.txt");
    //Rust parser = new Rust(input);
    

    //parser.start();

	new Rust(input);
	try {
		SimpleNode n= Rust.start();
		n.dump("");
		System.out.println("Chorizu y morcilla.");
	  } catch(Exception e) {
		System.out.println("Liadon del 15.");
		System.out.println(e.getMessage());
	  }
    
 }


}

PARSER_END(Rust)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
|<COMMENT_2: ("//"(~["\n"])*) >
}


TOKEN : /* OPERATORS */
{
	  <MULT: ("*") >
	| <DIV: ("/"|"%")>
	| <ADD: "+">
	| <MIN: "-" >
	| <RELATIONAL_OP:("<"|">"| ">="|"<="| "=="| "!=")>
	| < ASSIGNMENT: "=" >
	| < RETURN: "->" >
	| < AND: "&&" >
	| < OR: "||">
	| < NEGATIONAL_OP: "!" >
}

TOKEN: //SEPARATORS
{
	<SEMICOLON: ";">
	|<COMA: ",">
	| < DOT:"." >
	| < POINTS: ":" >
	| <OPEN_PAR: "(">
	| <CLOSE_PAR: ")">
	| < OPEN_CURL: "{" >
	| < CLOSE_CURL: "}" >
	| < OPEN_BRACK: "[" >
	| < CLOSE_BRACK: "]" >
	}

TOKEN: //Palabaras reservadas
{
	< FUNCTION : "fn" >
	|< PRINT: ("println!"|"print!") >
	| < IF : "if" >
	| < ELSE: "else" >
	| < LOOP: "loop" >
	| <BREAK: "break" >
	| < WHILE: "while" >
	| < FOR: "for" >
	| < IN: "in" >
	| < STRUCT: "struct" >
	| < RETURN_ST: "return" >
}


TOKEN: //NUMBER
{
  	<INT_NUMBER: (<DIGIT>)+>
	|<REAL_NUMBER: ((<DIGIT>)*(".")(<DIGIT>)+)>
}

TOKEN://POINTERS
{
	< DIRECTION_POINT: "&" >
}



TOKEN: //TIPOS
{
	< LET: "let" >
	| < MUT: "mut" >
	| < #SIGNED: ("i8"|"i16"|"i32"|"i64"|"i128"|"isize") >
	| < #UNSIGNED: ("u8"|"u16"|"u32"|"u64"|"u128"|"usize") >
	| < #FLOAT: ("f32"|"f64") >
	| < #BOOLEAN: "bool" >
	| < #STRING: "String" >
	| < TRUE_FALSE: "true"|"false" >
	| < CONST: "const" >
	| < TYPE: (< SIGNED >|< UNSIGNED >|< FLOAT >|< BOOLEAN >|< STRING >) >
}

TOKEN : //IDENTIFIER
{
  < NAME_CLASS_STRUCTURE : ((["A"-"Z"]) < SEQUENCE_CHAR >)>
 	|<IDENTIFIER: (("'"|<LETTER>)<SEQUENCE_CHAR>)> //Cambie la definicion de identifier
 	//para permitir identificadores como 'counting_up
	| < #DIGIT : ["0"-"9"] >
	| <#LETTER:(["A"-"Z", "a"-"z"])>
	| < #BAR: (	"-"|"_") >
	| < #SEQUENCE_CHAR: (<LETTER>|<DIGIT>|< BAR >)* >
	| < LITERAL_STRING:"\""(~["\""])*"\"" >
	| < CHARACTER:("'"< LETTER >"'") >
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Aqui empezamos el analisis sintactico ////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///START OF THE PROGRAM

/**
Comienzo del programa, se lee un programa y se termina con EOF
Its assigned the action of notify that the program is correct
*/
SimpleNode start(): { }
{
  	{ System.out.println("Start-> program EOF"); }
	program() <EOF>
	{
	  	return jjtThis;
		System.out.println("El programa es correcto.");
		symbolTable.print();
	}
}



/**
A program is composed of functions or composed by structures and functions
*/
void program() #Program: { }
{
  { System.out.println("program-> structures functions"); }
 structures() functions()
| { System.out.println("program-> functions"); }
		functions()
}

///DECLARATION OF STRUCTURES---------------------------------------------------------------------------------------------------------------

/**
There could be one or more structures
*/
void structures() #void : { }
{
	{ System.out.println("structures-> struct struct_p"); }
	struct() struct_p() 
}




/**
We use this one to delete the left-recursivity in structures
*/
void struct_p() #void: { }
{
  { System.out.println("struct_p-> structures "); }
	structures()
	| { System.out.println("struct_p-> { }"); }
	{ }
}

/**
Declaration of the struct that is outside the body of the function
*/
void struct() #Struct: {}
{
  	{System.out.println("struct - > STRUCT NAME_CLASS_STRUCTURE OPEN_CURL list_declaration_struct CLOSE_CURL");}
< STRUCT > < NAME_CLASS_STRUCTURE >< OPEN_CURL >list_declaration_struct()< CLOSE_CURL > 
 //The name of the struct must start by UPPER CASE, so i defined NAME_CLASS_STRUCTURE
}


/**
 List of the elements of the structure
*/
void list_declaration_struct() #void: { }
{
  { System.out.println("list_declaration_struct - > declaration_struct list_declaration_struct"); }
	declaration_struct() list_declaration_struct()
	|{ System.out.println("list_declaration_struct - > { }"); }
	{ }




}
/**
The stmt inside the structure
*/
void declaration_struct() #AttributeStruct: {Token t;}
{
  { System.out.println("declaration_struct - > IDENTIFIER POINTS TYPE COMA"); }
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}
< POINTS > < TYPE >< COMA >
}

///DECLARATION OF THE FUNCTIONS-------------------------------------------------------------------------------------------------------------------------


/**
Functions can be one function or more
There are two types of functions, normal functions, and return functions
*/
void functions() #void : { }
{
  { System.out.println("functions-> type_function function_p"); }
	type_function() function_p()
}


/**
We use this one to delete the left-recursivity in functions
*/
void function_p() #void : { }
{
  { System.out.println("function_p-> functions "); }
	functions()
	| { System.out.println("function_p-> { }"); }
	{ }
}


/**
 The function could be return function or normal function
*/
void type_function() #void : { }
{
  LOOKAHEAD(9)
  { System.out.println("type_function-> function"); }
	function()
	|{ System.out.println("type_function-> return_function"); }
	return_function() 
}



/**
The return_function, has a diferent declaration and a diferent body
*/
void return_function() #function: { }
{
  { System.out.println("return_function-> return_declaration return_body"); }
	return_declaration() return_body()
}


/**
A function is composed by a declaration and a body
*/
void function() #procedure: {}
{
  { System.out.println("function-> declaration body"); }
	declaration() body()
}



/**
The differenece in the declarations, are in the part after the signature, because, the
return signature has a different end
*/
void return_declaration() #void: {}
{
  { System.out.println("return_declaration-> initial_declaration return_signature"); }
	initial_declaration() return_signature()
}


/**
The declaration is composed of the token fn + the signature of the function
*/
void declaration() #void: {}
{
  { System.out.println("declaration-> initial_declaration normal_signature"); }
	initial_declaration() normal_signature()
}



/**
This initial declaration is common for the return_function and the normal function
*/
void initial_declaration() #void: { }
{
	{ System.out.println("initial_declaration - > FUNCTION signature"); }
	< FUNCTION> signature()
}





/**
the signature starts with IDENTIFIER (the name of the function) a list of parameters between parenthesis and the final
of the signature that can be a return or not.

This part is common for the two types of functions
*/
void signature() #signature : {Token t; }
{
	{ System.out.println("signature-> IDENTIFIER OPEN_PAR parameters CLOSE_PAR"); } 
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}
	< OPEN_PAR > parameters()< CLOSE_PAR> 
}


/**
 This part is only for the return fucntions, it means that a function
 returns something
 - > type
*/
void return_signature() #return_value_type: {}
{
  LOOKAHEAD(2)
  { System.out.println("return_signature-> RETURN TYPE"); } 
	< RETURN>< TYPE>
	|{ System.out.println("return_signature-> RETURN OPEN_PAR TYPE CLOSE_PAR"); } 
	< RETURN> < OPEN_PAR >< TYPE>< CLOSE_PAR > 
}



/**
THE FINAL SIGNATURE FOR THE OTHER FUNCTIONS COULD BE:
 -> () //It means that there arent nothing returning
 {}
*/
void normal_signature() #void: {}
{
	{ System.out.println("normal_signature-> RETURN OPEN_PAR CLOSE_PAR"); } 
	< RETURN> < OPEN_PAR> < CLOSE_PAR> #empty_return_value_type
	|{ System.out.println("normal_signature-> { }"); } 
	{ } 
}



/**
 parameters of a function, one or more attributes
*/
void parameters() #void:{}
{
  { System.out.println("parameters-> attribute attribute_p"); } 
	attribute() attribute_p()
	| { System.out.println("parameters-> { }"); } { } 
}




/**
aatributes separated by a coma
*/
void attribute_p() #parameter: {}
{
  	{ System.out.println("attribute_p-> COMA parameters attribute_p"); }
	< COMA>parameters() attribute_p()
	| { System.out.println("attribute_p-> { }"); }  { } 
}




/**
An attribute is like - >  x:i32
*/
void attribute() #void: {Token t; }
{
  	{ System.out.println("attribute-> IDENTIFIER POINTS TYPE"); } 
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}
	< POINTS> < TYPE> 
}



/**
The body of the return function is different from the other because IT ALWAYS ENDS WITH A RETURN STMT
*/
void return_body() #body: {}
{
  LOOKAHEAD(5)
  {System.out.println("body - > OPEN_CURL return_stmt CLOSE_CURL");}
< OPEN_CURL> return_stmt()< CLOSE_CURL> 
|   {System.out.println("body - > OPEN_CURL list_stmt return_stmt CLOSE_CURL");}
< OPEN_CURL> list_stmt()return_stmt()< CLOSE_CURL>
}

/**
Block of statements delimeted by curly parenthesis
This is the body for the other functions
FOR EXAMPLE
{
	let x = 12;
}
*/
void body() #body: {}
{
  {System.out.println("body - > OPEN_CURL list_stmt CLOSE_CURL");}
  < OPEN_CURL> list_stmt()< CLOSE_CURL> 
}


 /**
List_stmt could be one ore more stmt
 */
void list_stmt() #void :{}
{
  {System.out.println("list_stmt -> stmt stmt_p");}
  stmt()stmt_p()
}





/**
To delete the recursivity in list_stmt
*/
void stmt_p() #void :{}
{

	{System.out.println("stmt_p -> list_stmt");}
	list_stmt()
	|{System.out.println("stmt_p -> { }");}
	{ }
}




/**
There could be a lot of stmt:
	assignment_stmt() - > __ = _____
	declaration_stmt() - > type identifier;
	functioncall() - > funcion1()
	print_stmt() - > println!()
	arrays_stmt() - > declaration of arrays or assignment of arrays
	function_call_object() - > identifier.function()
	if_stmt() - > if (){ }else { }
	while_stmt() - > while () { }
	increase_counter () - > i+
	loop_stmt() - > loop;
	for() - > for () { }
	body() _ > To have { } in the middle of the code
	assign_struct_stmt- > To assign a values to a structure
*/
void stmt() #void :{}
{
	 LOOKAHEAD(4)
	 {System.out.println("stmt - > assignment_stmt");}
	 assignment_stmt()
	 |LOOKAHEAD(3)
	 { System.out.println("stmt-> arrays_stmt"); }
		arrays_stmt()
	 |LOOKAHEAD(2)
	  {System.out.println("stmt - > declaration_stmt");}
	 	declaration_stmt()
	 |LOOKAHEAD(2)
	 {System.out.println("stmt - > function_call");}
	 	function_call() < SEMICOLON > 
//Pongo aqui el semicolon, porque en alguna operacion se puede usar la llamada auna funcion sin que sea final de linea x = fn()+3;
 	 |{ System.out.println("stmt -> print_stmt");}
	 	print_stmt()
	 |LOOKAHEAD(2)
	 { System.out.println("stmt -> function_call_object");}
		function_call_object() < SEMICOLON > 
	 | { System.out.println("stmt-> if_stmt"); }
		if_stmt()
	 | { System.out.println("stmt-> while_stmt"); }
		while_stmt()
	 |LOOKAHEAD(3){ System.out.println("stmt-> increase_counter_stmt"); }
		increase_counter_stmt()
	 | { System.out.println("stmt-> loop_stmt"); }
		loop_stmt()
	 | { System.out.println("stmt-> for_stmt"); }
		for_stmt()
	 | { System.out.println("stmt-> body"); }
		//Its used when a group of statements appears in the middle of the code delimeted by curly parenth
		body()
	 | { System.out.println("stmt-> assign_structure_stmt"); }
		assign_structure_stmt()
	| { System.out.println("stmt-> expresion"); }
	expresion() < SEMICOLON > 
	
}

////RETURN STMT DECLARATION--------------------------------------------------------------------------------------------------------------------


/**
	The final stmt of a function that returns something
	it could be only an operator without semicolon or
	RETURN operator SEMICOLON
*/
void return_stmt() #void : {}
{
{System.out.println("return_stmt_p - > RETURN return_stmt_p SEMICOLON");}
< RETURN_ST > return_stmt_p()< SEMICOLON >
}

/**
The possible values that could be returned
operand
expresion
*/
void return_stmt_p() #return_value: { }
{
  LOOKAHEAD(2)
  {System.out.println("return_stmt_p - > expresion");}
	expresion()
|LOOKAHEAD(2){System.out.println("return_stmt_p - > operand");}
operand()
|{System.out.println("return_stmt_p - > increase_counter_stmt");}
increase_counter_stmt()
}




///ASSIGNMENT STMT----------------------------------------------------------------------------------------------------------------------------------------

/**
Assignment stmt that could be mutable
let x = 3;
let mut x=3;
x=3;
let x:i32 = 4
let mut x: i32 = 4
*/
void assignment_stmt() #assign_value_to_a_variable :{Token t; }
{
  {System.out.println("assignment_stmt  -> (declaration)? IDENTIFIER (<POINTS ><TYPE >)? ASSIGNMENT expresion SEMICOLON");}
	(< LET> (< MUT>)? )? t=< IDENTIFIER> {
	  	Position position3 = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry3 = new SymbolTableEntry(token.image, position3);
        symbolTable.addSymbolEntry(entry3);
	}
	(< POINTS> < TYPE> )?< ASSIGNMENT>expresion()< SEMICOLON > 
}


///DECLARATION_STMT-----------------------------------------------------------------------------------------------------------------------------

/**
Declaration stmt that could be mutable
let x;
let mut x;
let x: i32;
*/
void declaration_stmt() #declare_variable : { Token t;}
{
  {System.out.println("declaration_stmt  -> LET MUTABLE? IDENTIFIER (<POINTS ><TYPE >)? SEMICOLON");}
< LET > (< MUT > )?
	t= < IDENTIFIER> {
	  	Position position3 = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry3 = new SymbolTableEntry(token.image, position3);
        symbolTable.addSymbolEntry(entry3);
	}
	(< POINTS> < TYPE>)? < SEMICOLON > 
}

////OPERANDS-------------------------------------------------------------------------------------------------------------------------------

/**
Operands
INT NUMBER
REAL_NUMBER
FUNCTION_CALL_OBJECT ----- identifier.fucntion()
LITERAL_STRING
FUNCTION_CALL
IDENTIFIER
TRUE_FALSE

*/
void operand() #void:{Token t;}
{
  {System.out.println("operand -> INT_NUMBER");}
	< INT_NUMBER>  #Integer
  |{System.out.println("operand -> REAL_NUMBER");}
	< REAL_NUMBER > #Real
  |LOOKAHEAD(2)
  {System.out.println("operand -> function_call_object");}
	function_call_object()
  | {System.out.println("operand -> LITERAL_STRING");}
	< LITERAL_STRING> #String
   | LOOKAHEAD(2)
   {System.out.println("operand -> function_call");}
  function_call()
   | {System.out.println("operand -> IDENTIFIER");}
   t= < IDENTIFIER> {
	  	Position position4 = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry4 = new SymbolTableEntry(token.image, position4);
        symbolTable.addSymbolEntry(entry4);
	} #Identifier
	|{System.out.println("operand -> TRUE_FALSE");}
	< TRUE_FALSE> #Boolean
}


///FUNCTION_CALL---------------------------------------------------------------------------------------------------------------------------------


/**
function_call - > function(parameters)
*/
void function_call() #function_call:{Token t;}
{
  {System.out.println("function_call -> IDENTIFIER OPEN_PAR a_parameters CLOSE_PAR");}
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}
	< OPEN_PAR > a_parameters()< CLOSE_PAR> 
}




/**
Parameters of a function call
*/
void a_parameters() #void:{}
{
  {System.out.println("a_parameters -> operand a_parameters_p");}
	operand()a_parameters_p()
	|{System.out.println("a_parameters -> { }");}
	 { }
}




/**
To delete the recursivity in a_parameters
*/
void a_parameters_p() #void:{}
{
  {System.out.println("a_parameters_p -> COMA a_parameters");}
	< COMA > a_parameters()
	|{System.out.println("a_parameters_p -> { }");}
	{ }
}


// PRINT_STMT-----------------------------------------------------------------------------------------------------------------------------------------------------

/**
print_stmt :
println!("This is an example")
println!(" { }", 3)
*/
void print_stmt() #print :{}
{
  {System.out.println("print_stmt -> PRINT OPEN PAR LITERAL_STRING (COMA operand)? CLOSE_PAR SEMICOLON ");}
< PRINT >< OPEN_PAR > a_parameters()< CLOSE_PAR > < SEMICOLON > 
}


////EXPRESIONS----------------------------------------------------------------------------------------------------------------------------------------


/**
Expresion of type x+3+4...
*/
void expresion() #void:{}
{
  {System.out.println("expresion - > mult_div_expresion expresion_p");}
	multi_div_expresion() expresion_p() 
}




/**
 operand with another mult_div expr_p
*/
void multi_div_expresion() #void :{}
{
  {System.out.println("multi_div_expresion - > operand multi_div_expr_p");}
	operand() multi_div_expr_p()
}





/**
	To create the operations
*/
void multi_div_expr_p() #void :{}
{
  {System.out.println("multi_div_expr_p - > MULT operand multi_div_expr_p");}
	< MULT > #Mult operand() multi_div_expr_p()
	|{System.out.println("multi_div_expr_p - > DIV operand multi_div_expr_p");}
	< DIV > #Div operand() multi_div_expr_p()  
	|{System.out.println("multi_div_expr_p - > { }");}
	 { }
}





/**
	To create the operations
*/
void expresion_p() #void:{Token t;}
{
  {System.out.println("expresion_p - > ADD operand expresion_p");}
	< ADD > #Add multi_div_expresion() expresion_p() 
	|{System.out.println("expresion_p - > MIN operand expresion_p");}
	< MIN > #Min multi_div_expresion() expresion_p()  
	|{System.out.println("expresion_p -> { }");}
	{ }
}



///FUNCTION_CALL_OBJECT-----------------------------------------------------------------------------------------------------------------------------------------


/**
Call from an object.
spaces.len()
spaces.trim().size()
*/
void function_call_object() #function_call_object:{Token t; }
{
  {System.out.println("function_call_object - > IDENTIFIER (DOT FUNCTION_CALL)+");}
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}
	(< DOT > function_call())+ //There could be more than one function call spaces.trim().len()
}




///IF_STMT-------------------------------------------------------------------------------------------------------------------------------------



/**
	Create a conditional sentence
*/
void if_stmt() #If :{}
{
  	{ System.out.println("if_stmt-> IF condition body_if"); }
< IF > condition() body_if()
}




/**
	There could be diferent ends for the if
	ELSE
	ELSE IF...
	NOTHING
*/
void final_if() #void:{}
{
  LOOKAHEAD(2)
  { System.out.println("final_if-> ELSE IF condition body_if"); }
	< ELSE >< IF > #else_if condition() body_if() 
	| { System.out.println("final_if->ELSE body "); }
	< ELSE >body() #else_
|  { System.out.println("final_if-> { }"); }
	{}
}


/**
Body of the if
*/
void body_if() #void: { }
{
  { System.out.println("body_if-> body final_if"); }
	body() final_if()
}



/**
The condition could be a comparaison or a boolean expresion
*/
void condition() #condition:{}
{
  LOOKAHEAD(2)
  	{ System.out.println("condition-> comparison"); }
		comparison()
	| { System.out.println("condition-> boolean_expr"); }
		boolean_expr()
}



/**
Comparaison x > 3
*/
void comparison() #comparaison :{}
{
  	{ System.out.println("comparison-> expresion RELATIONAL_OP expresion"); }
	expresion()< RELATIONAL_OP >expresion()
}



/**
Boolean expresion
*/
void boolean_expr() #Or_expr (>1) :{}
{
  	{ System.out.println("boolean_expr-> and_expr boolean_expr_p"); }
	and_expr() boolean_expr_p()
}



/**
To delete recursivity on boolean_expr
*/
void boolean_expr_p() #void :{}
{
  	{ System.out.println("boolean_expr_p-> OR and_expr boolean_expr_p"); }
	< OR > and_expr() boolean_expr_p()
	| { System.out.println("boolean_expr_p-> { }"); } { }
}



/**
And_expr
*/
void and_expr() #And_expr(>1) :{}
{
  	{ System.out.println("and_expr-> boolean_operand and_expr_p"); }
	boolean_operand() and_expr_p()
}



/**
To delete recursivity on and_expr
*/
void and_expr_p() #void :{}
{
  LOOKAHEAD(2){ System.out.println("and_expr_p-> AND boolean_operand and_expr_p"); }
	< AND >boolean_operand() and_expr_p()
	| { System.out.println("and_expr_p-> AND OPEN_PAR boolean_operand CLOSE_PAR and_expr_p"); }
		< AND ><OPEN_PAR >boolean_operand()< CLOSE_PAR > and_expr_p()
  	| { System.out.println("and_expr_p-> { }"); }
  		{ }
}



/**
	Operands of a boolean expresion
	Comparaison
	!operand
	operand
*/
void boolean_operand() #void:{}
{
  LOOKAHEAD(2)
  	{ System.out.println("boolean_operand-> comparison"); }
	comparison() 

	| { System.out.println("boolean_operand-> NEGATIONAL_OP operand"); }
	< NEGATIONAL_OP >operand() #negational_boolean

	| { System.out.println("boolean_operand-> operand"); }
	 operand()
|{ System.out.println("boolean_operand-> OPEN_PAR boolean_expr CLOSE_PAR"); }
< OPEN_PAR > boolean_expr() < CLOSE_PAR >
}


////WHILE_STMT---------------------------------------------------------------------------------------------------------------------------------

/**
loop While
while
condition
body
*/
void while_stmt() #While :{}
{
  { System.out.println("while_stmt-> WHILE condition body_while"); }
	< WHILE > condition() body()
}

/**
To increase a counter, is also used in the loops
*/
void increase_counter_stmt() #IncreaseCounter : {Token t; }
{
	{ System.out.println("increase_counter_stmt-> IDENTIFIER ADD ASSIGNMENT expresion SEMICOLON"); }
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	} < ADD > < ASSIGNMENT > expresion()< SEMICOLON > 
}



////LOOP_STMT-------------------------------------------------------------------------------------------------------------------


/**
loop body
*/
void loop_stmt() #loop: {}
{
	{ System.out.println("loop_stmt-> LOOP body"); }
	< LOOP > body()
}



//// FOR_STMT-----------------------------------------------------------------------------------------------

/**
For stmt that defines the loop for.
*/
void for_stmt() #For: { Token t; }
{
  { System.out.println("for_stmt - > FOR IDENTIFIER IN IDENTIFIER body"); }
	< FOR > t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}< IN > < IDENTIFIER> body()
}



////ASSIGNATION OF VALUES TO STRUCTURES-------------------------------------------------------------------------------------------------------


/**
Code inside the function to assign a value to the declarations of a structure

User {
        email,
        username,
        active: true,
        sign_in_count: 1,
    }
*/
void assign_structure_stmt() #assign_struct: {Token t;}
{
  { System.out.println("assign_structure_stmt - > NAME_CLASS_STRUCTURE OPEN_CURL list_operands CLOSE_CURL"); }
	t= < NAME_CLASS_STRUCTURE > {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}< OPEN_CURL >list_operands()< CLOSE_CURL > 
}


/**
List of the operands of the assignment of the structure
*/
void list_operands() #void: {}
{
  { System.out.println("list_operands - > operand_assign_structure COMA list_operands"); }
	operand_assign_structure()
	< COMA > list_operands() 

	|{ System.out.println("list_operands - > { }"); }
	 { }
}





/**
There could be two types
        email,
        sign_in_count: 1,
    }
*/
void operand_assign_structure() #void: {Token t; }
{
  LOOKAHEAD(2)
  { System.out.println("operand_assign_structure - > IDENTIFIER POINTS operand"); }
	t= < IDENTIFIER> {
	  	Position position = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry = new SymbolTableEntry(token.image, position);
        symbolTable.addSymbolEntry(entry);
	}< POINTS > operand()

	|{ System.out.println("operand_assign_structure - >operand"); }
	operand() 
}


////ARRAY----------------------------------------------------------------------------------------------------------

/**
	Create a array the structure is: let IDENTIFIER: [Type; length] asignation
*/
void arrays_stmt() #Array: {}
{
  {System.out.println("array_stmt - > declaration_array final_array SEMICOLON");}
	declaration_array() final_array() < SEMICOLON > 
}


/**
FINAL of the array
In this way, an array stmt could be
declaration+ assignment
Only declaration
*/
void final_array() #void: { }
{
  {System.out.println("final_array - > assignment_array");}
  assignment_array()
|  {System.out.println("final_array - > { }");}
 { }
}


/**
Declaration of the array
*/
void declaration_array() #Declaration_Array: {Token t; }
{
    {System.out.println("declaration_array - > LET IDENTIFIER POINTS OPEN_BRACK TYPE SEMICOLON INT_NUMBER CLOSE_BRACK");}
	< LET>
	t= < IDENTIFIER> {
	  	Position position2 = new Position(token.beginLine, token.beginColumn, token.endLine, token.endColumn);
        SymbolTableEntry entry2 = new SymbolTableEntry(token.image, position2);
        symbolTable.addSymbolEntry(entry2);
	} < POINTS> < OPEN_BRACK>< TYPE> < SEMICOLON > < INT_NUMBER >< CLOSE_BRACK >
}

/**
	Create the assignment in the array
*/
void assignment_array() #Initialization_array: {}
{
	{ System.out.println("assignment_array- > ASSIGNMENT OPEN_BRACK body_assignment_array CLOSE_BRACK"); }
	< ASSIGNMENT > <OPEN_BRACK > body_assignment_array() < CLOSE_BRACK >
}

/**
	Create the body of the assignment array: = [1,pita,morcilles,gatu,8]
*/
void body_assignment_array()#void: {}
{
	{ System.out.println("body_assignment_array- > operand COMA?"); }
	 operand()(< COMA >)?body_assignment_array()

	| { System.out.println("body_assignment_array- > { }"); } { }
}


